#!/bin/bash
set -e

# first arg is `-f` or `--some-option`
if [ "${1#-}" != "$1" ]; then
    set -- php-fpm "$@"
fi

if grep "host.docker.internal" /etc/hosts; then
    echo -e "\n it already exists"
else
    echo -e "$(/sbin/ip route | awk '/default/ { print $3 }')\thost.docker.internal" >>/etc/hosts
    echo "added host.docker.internal to hosts"
fi

if [ "${RUN_COMPOSER}" != false ]; then
    if [ ! -f /var/www/html/source/config.inc.php ]; then

        case "$OXID_EDITION" in
        ce)
            echo "Downloading CE files..."
            composer create-project -vvv --profile --no-interaction --no-dev oxid-esales/oxideshop-project /var/www/html dev-b-${OXID_VERSION}-ce
            echo "Download CE files done"
            ;;
        pe)
            echo "Downloading PE files..."
            composer create-project -vvv --profile --no-interaction --no-dev oxid-esales/oxideshop-project /var/www/html dev-b-${OXID_VERSION}-pe
            echo "Download PE files done"
            ;;
        ee)
            echo "Downloading EE files..."
            composer create-project -vvv --profile --no-interaction --no-dev oxid-esales/oxideshop-project /var/www/html dev-b-${OXID_VERSION}-ee
            echo "Download EE files done"
            ;;
        b2b)
            echo "Downloading B2B files..."
            composer create-project -vvv --profile --no-interaction --no-dev oxid-esales/oxideshop-project /var/www/html dev-b-${OXID_VERSION}-ee
            composer config repositories.oxid-esales/b2b-module composer https://b2b-edition.packages.oxid-esales.com
            composer require oxid-esales/b2b-module ^v3.1.0
            echo "Download B2B files done"
            ;;
        esac

        cp /var/www/config.inc.php /var/www/html/source/
        echo "config moved"

        INSTALL_DEMODATA=${OXID_DEMODATA}

        chown -R www-data:www-data /var/www/html/*
        chmod -R 775 /var/www/html/
        chmod 444 /var/www/html/source/config.inc.php
        chmod 444 /var/www/html/source/.htaccess

        if [ "${INSTALL_SHOP}" != false ]; then
            #check if db container is ready
            while ! mysql -h ${MYSQL_HOST} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} -e 'SHOW GLOBAL STATUS LIKE "Uptime"' --connect_timeout=10; do
                sleep 10
                echo "DB not ready"
            done

            # bootstrap oxid database/demodata
            MYSQL_CHECKDATA=$(mysql -h ${MYSQL_HOST} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} --skip-column-names -e "SHOW TABLES FROM ${MYSQL_DATABASE} LIKE 'oxconfig';")
            if [ "${MYSQL_CHECKDATA}" = "" ]; then
                mysql -h ${MYSQL_HOST} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} </var/www/html/source/Setup/Sql/database_schema.sql
                echo "db schema created"
                mysql -h ${MYSQL_HOST} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} -e "UPDATE oxshops SET OXSMTP = 'mailhog:1025', OXSMTPUSER = '', OXSMTPPWD = '' WHERE oxid = 1;"
                if [ "${INSTALL_DEMODATA}" = true ]; then
                    php /var/www/html/vendor/bin/oe-eshop-doctrine_migration migrations:migrate
                    if [ "${OXID_EDITION}" = "b2b" ]; then
                        mysql -h ${MYSQL_HOST} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} </var/www/html/vendor/oxid-esales/oxideshop-demodata-ee/src/demodata.sql
                    else
                        mysql -h ${MYSQL_HOST} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} </var/www/html/vendor/oxid-esales/oxideshop-demodata-${OXID_EDITION}/src/demodata.sql
                    fi
                    php /var/www/html/vendor/bin/oe-eshop-db_views_regenerate
                    mv /var/www/html/source/Setup/ /var/www/html/source/_Setup/
                    echo "demodata installed"
                else
                    mysql -h ${MYSQL_HOST} -u ${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE} </var/www/html/source/Setup/Sql/initial_data.sql
                    echo "initial data imported"
                    php /var/www/html/vendor/bin/oe-eshop-doctrine_migration migrations:migrate
                    echo "migration done"
                    php /var/www/html/vendor/bin/oe-eshop-db_views_regenerate
                    echo "views regenerated"
                    mv /var/www/html/source/Setup/ /var/www/html/source/_Setup/
                    echo "database initialized without demodata"
                fi

            fi

            # Set the install date of the shop to now as \OxidEsales\EshopProfessional\Core\Serial::_isSerialExpired
            # would fail if the value stays null.
            php -- <<'EOPHP'

<?php
require_once '/var/www/html/source/bootstrap.php';
\OxidEsales\Eshop\Core\Registry::getConfig()->saveShopConfVar('str', 'sTagList', time());

EOPHP

            case "$OXID_EDITION" in
            ee)
                php -- <<'EOPHP'
<?php
require_once "/var/www/html/source/bootstrap.php";
class ShopLicense extends \OxidEsales\Eshop\Application\Controller\Admin\ShopLicense
{
    protected function _canUpdate()
    {
        return true;
    }
}
$config = \OxidEsales\Eshop\Core\Registry::getConfig();
$config->saveShopConfVar( 'arr', 'aSerials', array(\getenv('OXID_SERIAL')) );
$license = oxNew(ShopLicense::class);
$license->updateShopSerial();
EOPHP

                echo "EE serial installed"
                ;;
            pe)
                php -- <<'EOPHP'
<?php
require_once "/var/www/html/source/bootstrap.php";
class ShopLicense extends \OxidEsales\Eshop\Application\Controller\Admin\ShopLicense
{
    protected function _canUpdate()
    {
        return true;
    }
}
$config = \OxidEsales\Eshop\Core\Registry::getConfig();
$config->saveShopConfVar( 'arr', 'aSerials', array(\getenv('OXID_SERIAL')) );
$license = oxNew(ShopLicense::class);
$license->updateShopSerial();
EOPHP

                echo "PE serial installed"
                ;;
            b2b)
                php -- <<'EOPHP'

<?php
require_once "/var/www/html/source/bootstrap.php";

class ShopLicense extends \OxidEsales\Eshop\Application\Controller\Admin\ShopLicense
{
    protected function _canUpdate()
    {
        return true;
    }
}

$config = \OxidEsales\Eshop\Core\Registry::getConfig();
$config->saveShopConfVar( 'arr', 'aSerials', array(\getenv('OXID_SERIAL')) );

$license = oxNew(ShopLicense::class);
$license->updateShopSerial();

EOPHP

                echo "B2B serial installed"
                ;;
            esac

            if [ "${OXID_EDITION}" = "b2b" ]; then
                php /var/www/html/source/modules/b2b/Setup/setupB2bEnvironment.php
                rm -R /var/www/html/source/modules/b2b/Setup
                echo "B2B Modules installed"
            fi

            if [ "${MEMCACHED}" = true ] && [ "${OXID_EDITION}" = ee ]; then
                php -- <<'EOPHP'

<?php
require_once "/var/www/html/source/bootstrap.php";

$config = \OxidEsales\Eshop\Core\Registry::getConfig();
$config->saveShopConfVar( 'bool', 'blCacheActive', true );
$config->saveShopConfVar( 'arr', 'aMemcachedServers', array('memcached@11211@100') );
$config->saveShopConfVar( 'str', 'sDefaultCacheConnector', 'oxMemcachedCacheConnector' );

EOPHP

                echo "MEMCACHED activated"
            fi

            chown -R www-data:www-data /var/www/html/*

        fi
    fi
else
    mkdir /var/www/html/source
fi

exec "$@"
